#include <stdio.h>
#include <stdlib.h>

void sort(int arr[], int n) {
    // Simple Bubble Sort
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
}

int main() {
    int n, head, disk_size, direction;
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    int requests[n];
    printf("Enter the disk request sequence:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &requests[i]);

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the total disk size (number of cylinders): ");
    scanf("%d", &disk_size);

    printf("Enter head movement direction (0 for left, 1 for right): ");
    scanf("%d", &direction);

    // Add head and boundaries for SCAN
    int temp[n + 2], size = n + 1;
    for (int i = 0; i < n; i++)
        temp[i] = requests[i];
    temp[n] = head;

    if (direction == 0)
        temp[n+1] = 0;
    else
        temp[n+1] = disk_size - 1;
    size++;

    sort(temp, size);

    // Find head index in sorted array
    int index;
    for (int i = 0; i < size; i++) {
        if (temp[i] == head) {
            index = i;
            break;
        }
    }

    int total_movement = 0;
    printf("\nDisk head movement:\n");

    if (direction == 1) {  // Move right
        for (int i = index; i < size - 1; i++) {
            printf("Move from %d to %d => Distance = %d\n", temp[i], temp[i+1], abs(temp[i+1] - temp[i]));
            total_movement += abs(temp[i+1] - temp[i]);
        }
        for (int i = index - 1; i >= 0; i--) {
            printf("Move from %d to %d => Distance = %d\n", temp[size - 1 - (index - i)], temp[i], abs(temp[size - 1 - (index - i)] - temp[i]));
            total_movement += abs(temp[size - 1 - (index - i)] - temp[i]);
        }
    } else {  // Move left
        for (int i = index; i > 0; i--) {
            printf("Move from %d to %d => Distance = %d\n", temp[i], temp[i-1], abs(temp[i] - temp[i-1]));
            total_movement += abs(temp[i] - temp[i-1]);
        }
        for (int i = index + 1; i < size; i++) {
            printf("Move from %d to %d => Distance = %d\n", temp[i - 1], temp[i], abs(temp[i] - temp[i - 1]));
            total_movement += abs(temp[i] - temp[i - 1]);
        }
    }

    printf("\nTotal head movement = %d cylinders\n", total_movement);
    return 0;
}
