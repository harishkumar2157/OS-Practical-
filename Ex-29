#include <stdio.h>
#include <stdlib.h>

int mutex = 1;       // Used for mutual exclusion
int full = 0;        // Count of full slots
int empty = 5;       // Count of empty slots (buffer size = 5)
int item = 0;        // Item counter

// Semaphore functions
int wait(int s) {
    return (--s);
}

int signal(int s) {
    return (++s);
}

void producer() {
    if (mutex == 1 && empty != 0) {
        mutex = wait(mutex);
        full = signal(full);
        empty = wait(empty);
        item++;
        printf("Producer produced item %d\n", item);
        mutex = signal(mutex);
    } else {
        printf("Buffer is full! Producer is waiting...\n");
    }
}

void consumer() {
    if (mutex == 1 && full != 0) {
        mutex = wait(mutex);
        full = wait(full);
        empty = signal(empty);
        printf("Consumer consumed item %d\n", item);
        item--;
        mutex = signal(mutex);
    } else {
        printf("Buffer is empty! Consumer is waiting...\n");
    }
}

int main() {
    int choice;

    while (1) {
        printf("\n1. Produce\n2. Consume\n3. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: producer(); break;
            case 2: consumer(); break;
            case 3: exit(0);
            default: printf("Invalid choice!\n");
        }
    }

    return 0;
}
