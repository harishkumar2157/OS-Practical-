#include <stdio.h>

struct Process {
    int pid;
    int bt;
    int at;
    int ct;
    int wt;
    int tat;
    int completed;
};

int main() {
    int n, time = 0, completed = 0;
    struct Process p[20];
    int i, j, shortest;
    
    // Input
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].pid);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].completed = 0;
    }

    // Scheduling
    while (completed != n) {
        shortest = -1;
        for (i = 0; i < n; i++) {
            if (p[i].at <= time && p[i].completed == 0) {
                if (shortest == -1 || p[i].bt < p[shortest].bt ||
                    (p[i].bt == p[shortest].bt && p[i].at < p[shortest].at)) {
                    shortest = i;
                }
            }
        }

        if (shortest != -1) {
            time += p[shortest].bt;
            p[shortest].ct = time;
            p[shortest].tat = p[shortest].ct - p[shortest].at;
            p[shortest].wt = p[shortest].tat - p[shortest].bt;
            p[shortest].completed = 1;
            completed++;
        } else {
            time++; // CPU idle
        }
    }

    // Output
    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }

    return 0;
}
