#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t wrt;
pthread_mutex_t mutex;
int readcount = 0;
int data = 0; // shared resource

void* reader(void* arg) {
    int id = *((int*)arg);
    while (1) {
        pthread_mutex_lock(&mutex);
        readcount++;
        if (readcount == 1)
            sem_wait(&wrt); // first reader locks writer
        pthread_mutex_unlock(&mutex);

        // Reading section
        printf("Reader %d: read data = %d\n", id, data);
        sleep(1);

        pthread_mutex_lock(&mutex);
        readcount--;
        if (readcount == 0)
            sem_post(&wrt); // last reader unlocks writer
        pthread_mutex_unlock(&mutex);
        sleep(1);
    }
}

void* writer(void* arg) {
    int id = *((int*)arg);
    while (1) {
        sem_wait(&wrt); // writer needs exclusive access

        // Writing section
        data++;
        printf("Writer %d: wrote data = %d\n", id, data);
        sleep(1);

        sem_post(&wrt); // release access
        sleep(2);
    }
}

int main() {
    pthread_t r[3], w[2];
    int i;
    int reader_id[3] = {1, 2, 3};
    int writer_id[2] = {1, 2};

    sem_init(&wrt, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    for (i = 0; i < 3; i++)
        pthread_create(&r[i], NULL, reader, &reader_id[i]);

    for (i = 0; i < 2; i++)
        pthread_create(&w[i], NULL, writer, &writer_id[i]);

    for (i = 0; i < 3; i++)
        pthread_join(r[i], NULL);

    for (i = 0; i < 2; i++)
        pthread_join(w[i], NULL);

    sem_destroy(&wrt);
    pthread_mutex_destroy(&mutex);

    return 0;
}
