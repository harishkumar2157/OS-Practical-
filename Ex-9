#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>

int main() {
    key_t key = ftok("shmfile", 65); // generate unique key
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT); // create shared memory
    if (shmid == -1) {
        perror("shmget failed");
        return 1;
    }

    pid_t pid = fork(); // create child process

    if (pid < 0) {
        perror("fork failed");
        return 1;
    }

    if (pid > 0) {
        // Parent process: write to shared memory
        char *str = (char *)shmat(shmid, NULL, 0);
        if (str == (char *)-1) {
            perror("shmat failed");
            return 1;
        }

        strcpy(str, "Hello from parent process!");
        printf("Parent wrote: %s\n", str);

        shmdt(str); // detach
        wait(NULL); // wait for child
    } else {
        // Child process: read from shared memory
        sleep(1); // ensure parent writes first
        char *str = (char *)shmat(shmid, NULL, 0);
        if (str == (char *)-1) {
            perror("shmat failed");
            return 1;
        }

        printf("Child read: %s\n", str);
        shmdt(str); // detach
        shmctl(shmid, IPC_RMID, NULL); // destroy shared memory
    }

    return 0;
}
