#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>

struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    key_t key = ftok("progfile", 65); // generate unique key
    int msgid = msgget(key, 0666 | IPC_CREAT); // create message queue

    if (msgid == -1) {
        perror("msgget failed");
        return 1;
    }

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        return 1;
    }

    if (pid > 0) {
        // Parent: send message
        struct msg_buffer message;
        message.msg_type = 1;
        strcpy(message.msg_text, "Hello from parent via message queue");

        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        printf("Parent sent: %s\n", message.msg_text);

        wait(NULL); // wait for child
    } else {
        // Child: receive message
        struct msg_buffer message;
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Child received: %s\n", message.msg_text);

        msgctl(msgid, IPC_RMID, NULL); // destroy message queue
    }

    return 0;
}
