#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define SIZE 5

int buffer[SIZE];
int in = 0, out = 0;

sem_t empty, full, mutex;

void* producer(void* arg) {
    int item = 1;
    while (1) {
        sem_wait(&empty);          // wait for empty slot
        sem_wait(&mutex);          // enter critical section

        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % SIZE;
        item++;

        sem_post(&mutex);          // leave critical section
        sem_post(&full);           // increase full count

        sleep(1);
    }
}

void* consumer(void* arg) {
    int item;
    while (1) {
        sem_wait(&full);           // wait for full slot
        sem_wait(&mutex);          // enter critical section

        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % SIZE;

        sem_post(&mutex);          // leave critical section
        sem_post(&empty);          // increase empty count

        sleep(2);
    }
}

int main() {
    pthread_t prod, cons;

    sem_init(&empty, 0, SIZE);     // SIZE empty slots
    sem_init(&full, 0, 0);         // 0 full slots initially
    sem_init(&mutex, 0, 1);        // mutex = 1

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
